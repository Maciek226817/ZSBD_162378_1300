//zadanie1
SELECT 
    employee_id, 
    first_name, 
    last_name, 
    salary, 
    DENSE_RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;


//zadanie2
SELECT 
    employee_id, 
    first_name, 
    last_name, 
    salary, 
    DENSE_RANK() OVER (ORDER BY salary DESC) AS salary_rank,
    SUM(salary) OVER () AS total_salary
FROM employees;


//zadanie3
SELECT 
    e.last_name,
    p.product_name,
    SUM(s.quantity * s.price) OVER (PARTITION BY e.employee_id) AS total_sales,
    DENSE_RANK() OVER (ORDER BY s.quantity * s.price DESC) AS salary_rank
FROM employees e 
JOIN sales s ON e.employee_id = s.employee_id
JOIN products p ON  s.product_id = s.product_id;


//zadanie4
SELECT
	e.last_name,
	p.product_name,
	s.price,
COUNT(*) OVER (PARTITION BY s.product_id, s.sale_date) AS transaction_count,
SUM(s.price * s.quantity) OVER (PARTITION BY s.product_id, s.sale_date) AS total_revenue,
LAG(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS previous_price,
LEAD(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS next_price
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id
JOIN products p ON  s.product_id = s.product_id;

//zadanie5
SELECT 
	p.product_name,
	s.price,
SUM(s.price * s.quantity) OVER (PARTITION BY EXTRACT(YEAR FROM s.sale_date), EXTRACT(MONTH FROM s.sale_date), s.product_id) AS monthly_total,
SUM(s.price * s.quantity) OVER (PARTITION BY EXTRACT(YEAR FROM s.sale_date), EXTRACT(MONTH FROM s.sale_date), s.product_id ORDER BY s.sale_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total
FROM sales s
JOIN products p ON s.product_id = p.product_id;


//zadanie6
SELECT 
    p.product_name,
    p.product_category,
    s2022.price AS price_2022,
    s2023.price AS price_2023,
    (s2023.price - s2022.price) AS price_difference
FROM sales s2022
JOIN sales s2023 
    ON s2022.product_id = s2023.product_id
    AND EXTRACT(MONTH FROM s2022.sale_date) = EXTRACT(MONTH FROM s2023.sale_date)
    AND EXTRACT(DAY FROM s2022.sale_date) = EXTRACT(DAY FROM s2023.sale_date)
    AND EXTRACT(YEAR FROM s2022.sale_date) = 2022
    AND EXTRACT(YEAR FROM s2023.sale_date) = 2023
JOIN products p ON s2022.product_id = p.product_id;


//zadanie7
SELECT 
    p.product_category,
    p.product_name,
    s.price,
    MIN(s.price) OVER (PARTITION BY  p.product_category) AS min_price_in_category,
    MAX(s.price) OVER (PARTITION BY  p.product_category) AS max_price_in_category,
    MAX(s.price) OVER (PARTITION BY  p.product_category) - MIN(s.price) OVER (PARTITION BY  p.product_category) AS price_difference
FROM sales s
JOIN products p ON s.product_id = p.product_id;


//zadanie8
SELECT 
    p.product_name,
    s.sale_date,
    (LAG(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) + 
     s.price + 
     LEAD(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date)) / 3 AS moving_average_price
FROM sales s
JOIN products p ON s.product_id = p.product_id
ORDER BY s.product_id, s.sale_date;


//zadanie9
SELECT 
    p.product_name,
    p.product_category,
    RANK() OVER (PARTITION BY p.product_category ORDER BY s.price DESC) AS price_rank,
    DENSE_RANK() OVER (PARTITION BY  p.product_category ORDER BY s.price DESC) AS dense_price_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id
ORDER BY price_rank;


//zadanie10
SELECT 
    e.last_name,
    p.product_name,
    s.price * s.quantity AS sale_value,
    SUM(s.price * s.quantity) OVER (PARTITION BY e.employee_id ORDER BY s.sale_date) AS running_sale_value,
    RANK() OVER (ORDER BY (s.price * s.quantity) DESC) AS global_sale_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN employees e ON s.employee_id = e.employee_id
ORDER BY e.employee_id, s.sale_date;


//zadanie11
SELECT 
    e.first_name || ' ' || e.last_name AS employee_name,
    j.job_title
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id
JOIN jobs j ON e.job_id = j.job_id
GROUP BY e.first_name, e.last_name, j.job_title;