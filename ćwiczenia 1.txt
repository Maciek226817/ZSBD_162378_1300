Tabele:

Tabela REGIONS
CREATE TABLE REGIONS (
    region_id NUMBER PRIMARY KEY,
    region_name VARCHAR2(25)
);

Tabela COUNTRIES
CREATE TABLE COUNTRIES (
    country_id CHAR(2) PRIMARY KEY,
    country_name VARCHAR2(40),
    region_id NUMBER,
    CONSTRAINT fk_region_id FOREIGN KEY (region_id) REFERENCES REGIONS(region_id)
);

Tabela LOCATIONS
CREATE TABLE LOCATIONS (
    location_id NUMBER PRIMARY KEY,
    street_address VARCHAR2(40),
    postal_code VARCHAR2(12),
    city VARCHAR2(30) NOT NULL,
    state_province VARCHAR2(25),
    country_id CHAR(2),
    CONSTRAINT fk_country_id FOREIGN KEY (country_id) REFERENCES COUNTRIES(country_id)
);

Tabela DEPARTMENTS
CREATE TABLE DEPARTMENTS (
    department_id NUMBER PRIMARY KEY,
    department_name VARCHAR2(30) NOT NULL,
    manager_id NUMBER,
    location_id NUMBER,
    CONSTRAINT fk_location_id FOREIGN KEY (location_id) REFERENCES LOCATIONS(location_id)
);

Tabela JOBS
CREATE TABLE JOBS (
    job_id VARCHAR2(10) PRIMARY KEY,
    job_title VARCHAR2(50) NOT NULL,
    min_salary NUMBER,
    max_salary NUMBER,
    CONSTRAINT chk_salary_range CHECK (min_salary < max_salary AND min_salary >= 2000)
);

Tabela EMPLOYEES
CREATE TABLE EMPLOYEES (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(20),
    last_name VARCHAR2(25) NOT NULL,
    email VARCHAR2(25) UNIQUE NOT NULL,
    phone_number VARCHAR2(20),
    hire_date DATE NOT NULL,
    job_id VARCHAR2(10),
    salary NUMBER,
    commission_pct NUMBER,
    manager_id NUMBER,
    department_id NUMBER,
    CONSTRAINT fk_job_id FOREIGN KEY (job_id) REFERENCES JOBS(job_id),
    CONSTRAINT fk_manager_id FOREIGN KEY (manager_id) REFERENCES EMPLOYEES(employee_id),
    CONSTRAINT fk_department_id FOREIGN KEY (department_id) REFERENCES DEPARTMENTS(department_id)
);

Tabela JOB_HISTORY
CREATE TABLE JOB_HISTORY (
    employee_id NUMBER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    job_id VARCHAR2(10) NOT NULL,
    department_id NUMBER NOT NULL,
    CONSTRAINT pk_job_history PRIMARY KEY (employee_id, start_date),
    CONSTRAINT fk_employee_id FOREIGN KEY (employee_id) REFERENCES EMPLOYEES(employee_id),
    CONSTRAINT fk_job_history_job_id FOREIGN KEY (job_id) REFERENCES JOBS(job_id),
    CONSTRAINT fk_job_history_department_id FOREIGN KEY (department_id) REFERENCES DEPARTMENTS(department_id)
);



Wstawienie 4 rekordy do tabeli JOBS:

INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES ('DEV', 'Developer', 3000, 8000);
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES ('QA', 'QA Engineer', 3500, 9000);
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES ('MGR', 'Manager', 5000, 15000);
INSERT INTO JOBS (job_id, job_title, min_salary, max_salary) VALUES ('HR', 'HR Specialist', 2000, 6000);

Wstawienie 4 rekordów do tabeli EMPLOYEES

INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, hire_date, job_id, salary, department_id) 
VALUES (1, 'John', 'Doe', 'john.doe@example.com', SYSDATE, 'DEV', 5000, 1);

INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, hire_date, job_id, salary, department_id) 
VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', SYSDATE, 'QA', 4000, 1);

INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, hire_date, job_id, salary, department_id) 
VALUES (3, 'Alice', 'Johnson', 'alice.johnson@example.com', SYSDATE, 'HR', 3000, 2);

INSERT INTO EMPLOYEES (employee_id, first_name, last_name, email, hire_date, job_id, salary, department_id) 
VALUES (4, 'Bob', 'Brown', 'bob.brown@example.com', SYSDATE, 'MGR', 8000, 2);

ZMiana menadzera pracownikom o id 2 i 3 na 1

UPDATE EMPLOYEES SET manager_id = 1 WHERE employee_id IN (2, 3);


Zwieksszenie o 500 wynagrodzenia

UPDATE JOBS 
SET min_salary = min_salary + 500, max_salary = max_salary + 500
WHERE job_title LIKE '%b%' OR job_title LIKE '%s%';

Usuwanie rekordów z tabelo JOBS max zarobki 9000

DELETE FROM JOBS WHERE max_salary > 9000;

Usuń jedną z tabel i sprawdź, czy możesz ją odzyskać
1opcja
DROP TABLE EMPLOYEES;
FLASHBACK TABLE EMPLOYEES TO BEFORE DROP;

2opcja
SAVEPOINT before_delete;
DELETE FROM EMPLOYEES
WHERE employee_id = 4;
ROLLBACK TO before_delete;